ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1) +
labs(title = "Mean weight through time for different treatments",
x = "Day",
y = "Weight (g)") +
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, line =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
scale_x_continuous(breaks = 0:100, labels = 0:100)
weight_measure_file <- read.csv2(url(github_url), sep = "\t")
github_url <- "https://raw.githubusercontent.com/bioth/gut-microbiota-iron/main/adult_dss_weight_measurement.csv?token=GHSAT0AAAAAACM4RJV2GOGTEAJEUNF3I65WZNP7G3Q"
weight_measure_file <- read.csv2(url(github_url), sep = "\t")
#removing the 3 dead mice
weight_measure_file = weight_measure_file[-c(16,27,36,37),]
#using pivot longer from dplyr package to reorganize the data
weight_measure_file = pivot_longer(weight_measure_file, c(10:length(weight_measure_file)), cols_vary = "slowest", names_to = "date", values_to = "weight")
#modifying the date format so that it is recognizable by R
for(i in c(1:length(weight_measure_file$date))){
weight_measure_file$date[i] <- gsub("\\.", "-", weight_measure_file$date[i])
weight_measure_file$date[i] <- substring(weight_measure_file$date[i], first = 3)
weight_measure_file$date[i] <- substr( weight_measure_file$date[i], start = 1, stop = nchar( weight_measure_file$date[i]) - 1)
}
#tranforming in date format
weight_measure_file$date <- as.Date(weight_measure_file$date, format = "%B")
#tranforming in date format
weight_measure_file$date <- as.Date(weight_measure_file$date)
weight_measure_file <- read.csv2(url(github_url), sep = "\t")
#removing the 3 dead mice
weight_measure_file = weight_measure_file[-c(16,27,36,37),]
#using pivot longer from dplyr package to reorganize the data
weight_measure_file = pivot_longer(weight_measure_file, c(10:length(weight_measure_file)), cols_vary = "slowest", names_to = "date", values_to = "weight")
#modifying the date format so that it is recognizable by R
for(i in c(1:length(weight_measure_file$date))){
weight_measure_file$date[i] <- gsub("\\.", "-", weight_measure_file$date[i])
weight_measure_file$date[i] <- substring(weight_measure_file$date[i], first = 3)
weight_measure_file$date[i] <- substr( weight_measure_file$date[i], start = 1, stop = nchar( weight_measure_file$date[i]) - 1)
}
#tranforming in date format
weight_measure_file$date <- as.Date(weight_measure_file$date)
#setting the diet column data into a string format so that it can be used into ggplot
weight_measure_file$Diet..Fe.ppm. = as.character(weight_measure_file$Diet..Fe.ppm.)
#using this enables to verify is a variable is of type "date"
str(weight_measure_file)
#replacing abnormal values
weight_measure_file$weight[5] = 24.2
weight_measure_file$weight[29] = 23.1
weight_measure_file$group = NA
#creating 4 groups for easier graphic interpretations
for(i in c(1:length(weight_measure_file$arbitrary.number))){
if(any(weight_measure_file$arbitrary.number[i] %in% c(1,3,5))){
weight_measure_file$group[i] <- "dss_50"
}
if(any(weight_measure_file$arbitrary.number[i] %in% c(2,4,6))){
weight_measure_file$group[i] <- "wtr_50"
}
if(any(weight_measure_file$arbitrary.number[i] %in% c(7,9,11))){
weight_measure_file$group[i] <- "dss_500"
}
if(any(weight_measure_file$arbitrary.number[i] %in% c(8,10,12))){
weight_measure_file$group[i] <- "wtr_500"
}
}
#creating scatter plot with the four different treatments (diet combined with dss or control)
data = as.data.frame(weight_measure_file)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
scale_x_continuous(breaks = 0:100, labels = 0:100)+
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
scale_x_continuous(breaks = 0:100, labels = "0:100")+
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)",
colours("a","b","c","d")) +
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)",
colours("a","b","c","d")) +
scale_color_manual(name = "Legend", values = c(Mean = "blue")) +
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
scale_color_manual(name = "Legend", values = c(Mean = "blue")) +
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
scale_color_manual(name = "Legend") +
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
scale_color_manual(name = "Legend", values = c(Mean = "blue","red","green","yellow")) +
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
scale_linetype_manual(name = "Legend", values = c(Dashed = "dashed")) +
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
scale_linetype_manual(name = c("a","b","c","d"), values = c(Dashed = "dashed")) +
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
scale_color_manual(name = "Legend",
values = c("dss_50" = "blue", "dss_500" = "green",
"wtr_50" = "red", "wtr_500" = "purple"))+
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
scale_color_manual(name = "Legend",
values = c("nzefuzefuhizefui" = "blue", "dss_500" = "green",
"wtr_50" = "red", "wtr_500" = "purple"))+
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
scale_color_manual(name = "Legend",
labels = c("Group1 Label", "Group2 Label", "Group3 Label", "Group4 Label")))+
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
scale_color_manual(name = "Legend",
labels = c("Group1 Label", "Group2 Label", "Group3 Label", "Group4 Label"))+
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
scale_color_manual(name = "Legend",
values = c("n" = "blue", "dss_500" = "green",
"wtr_50" = "red", "wtr_500" = "purple", labels = c("Group1 Label", "Group2 Label", "Group3 Label", "Group4 Label")))+
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
scale_color_manual(name = "Legend",
values = c("dss_50" = "blue", "dss_500" = "green",
"wtr_50" = "red", "wtr_500" = "purple", labels = c("Group1 Label", "Group2 Label", "Group3 Label", "Group4 Label")))+
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
scale_color_manual(name = "Legend",
breaks = c("dss_50", "dss_500", "wtr_50", "wtr_500"),
values = c("dss_50" = "blue", "dss_500" = "green",
"wtr_50" = "red", "wtr_500" = "purple", labels = c("Group1 Label", "Group2 Label", "Group3 Label", "Group4 Label")))+
scale_color
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
scale_color_manual(name = "Legend",
breaks = c("dss_50", "dss_500", "wtr_50", "wtr_500"),
values = c("dss_50" = "blue", "dss_500" = "green",
"wtr_50" = "red", "wtr_500" = "purple", labels = c("Group1 Label", "Group2 Label", "Group3 Label", "Group4 Label")))+
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)",
colors = c("a","b","c","d")) +
scale_color_manual(name = "Legend",
breaks = c("dss_50", "dss_500", "wtr_50", "wtr_500"),
values = c("dss_50" = "blue", "dss_500" = "green",
"wtr_50" = "red", "wtr_500" = "purple",
labels = c("Group1 Label", "Group2 Label", "Group3 Label", "Group4 Label")))+
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)",
color = c("a","b","c","d")) +
scale_color_manual(name = "Legend",
breaks = c("dss_50", "dss_500", "wtr_50", "wtr_500"),
values = c("dss_50" = "blue", "dss_500" = "green",
"wtr_50" = "red", "wtr_500" = "purple",
labels = c("Group1 Label", "Group2 Label", "Group3 Label", "Group4 Label")))+
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)",
color = c("a","b","c","d")) +
scale_color_manual(name = "Legend",
breaks = c("dss_50", "dss_500", "wtr_50", "wtr_500"),
values = c("dss_50" = "blue", "dss_500" = "green",
"wtr_50" = "red", "wtr_500" = "purple"))+
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
scale_color_manual(name = "Legend",
breaks = c("dss_50", "dss_500", "wtr_50", "wtr_500"),
values = c("dss_50" = "blue", "dss_500" = "green",
"wtr_50" = "red", "wtr_500" = "purple"))+
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)",
color = c("a","b","c","d")) +
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
scale_color_manual(name = "Legend",
breaks = c("dss_50", "dss_500", "wtr_50", "wtr_500"),
values = c("dss_50" = "blue", "dss_500" = "green",
"wtr_50" = "red", "wtr_500" = "purple"),
names = c("a","b","c","d"))+
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)",
color = c("a","b","c","d")) +
theme_minimal()+
ylim(0,30)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
scale_color_manual(name = "Legend",
values = c("dss_50" = "blue", "dss_500" = "green",
"wtr_50" = "red", "wtr_500" = "purple"),
names = c("a","b","c","d"))+
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)",
color = c("a","b","c","d")) +
theme_minimal()+
ylim(0,30)
weight_measure_file <- read.csv2(url(github_url), sep = "\t")
github_url <- "https://raw.githubusercontent.com/bioth/gut-microbiota-iron/main/adult_dss_weight_measurement.csv?token=GHSAT0AAAAAACM4RJV2GOGTEAJEUNF3I65WZNP7G3Q"
weight_measure_file <- read.csv2(url(github_url), sep = "\t")
github_url <- "https://raw.githubusercontent.com/bioth/gut-microbiota-iron/main/adult_dss_weight_measurement.csv?token=GHSAT0AAAAAACM4RJV227EES4SIHSXRRDG4ZNQBOGQ"
weight_measure_file <- read.csv2(url(github_url), sep = "\t")
#removing the 3 dead mice
weight_measure_file = weight_measure_file[-c(16,27,36,37),]
#using pivot longer from dplyr package to reorganize the data
weight_measure_file = pivot_longer(weight_measure_file, c(10:length(weight_measure_file)), cols_vary = "slowest", names_to = "date", values_to = "weight")
#modifying the date format so that it is recognizable by R
for(i in c(1:length(weight_measure_file$date))){
weight_measure_file$date[i] <- gsub("\\.", "-", weight_measure_file$date[i])
weight_measure_file$date[i] <- substring(weight_measure_file$date[i], first = 3)
weight_measure_file$date[i] <- substr( weight_measure_file$date[i], start = 1, stop = nchar( weight_measure_file$date[i]) - 1)
}
#tranforming in date format
weight_measure_file$date <- as.Date(weight_measure_file$date)
#setting the diet column data into a string format so that it can be used into ggplot
weight_measure_file$Diet..Fe.ppm. = as.character(weight_measure_file$Diet..Fe.ppm.)
#using this enables to verify is a variable is of type "date"
str(weight_measure_file)
#replacing abnormal values
weight_measure_file$weight[5] = 24.2
weight_measure_file$weight[29] = 23.1
weight_measure_file$group = NA
#creating 4 groups for easier graphic interpretations
for(i in c(1:length(weight_measure_file$arbitrary.number))){
if(any(weight_measure_file$arbitrary.number[i] %in% c(1,3,5))){
weight_measure_file$group[i] <- "50 ppm FeSO4 + DSS"
}
if(any(weight_measure_file$arbitrary.number[i] %in% c(2,4,6))){
weight_measure_file$group[i] <- "50 ppm FeSO4 + water"
}
if(any(weight_measure_file$arbitrary.number[i] %in% c(7,9,11))){
weight_measure_file$group[i] <- "500 ppm FeSO4 + DSS"
}
if(any(weight_measure_file$arbitrary.number[i] %in% c(8,10,12))){
weight_measure_file$group[i] <- "500 ppm FeSO4 + water"
}
}
#creating scatter plot with the four different treatments (diet combined with dss or control)
data = as.data.frame(weight_measure_file)
data %>%
ggplot(aes(x = date, y = weight, color = group))+
geom_point(stat = "summary",fun = mean, aes(group = group), size = 2) +
geom_line(stat = "summary", fun = "mean", aes(group = group), linewidth = 1, linetype =  "dashed" ) +
labs(title = "Body weight through time",
x = "Day",
y = "Weight (g)") +
theme_minimal()+
ylim(0,30)
#downloading the csv file from github
github_token <- "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"
set_config(config(token = github_token))
github_url <- "https://raw.githubusercontent.com/bioth/gut-microbiota-iron/main/adult_dss_weight_measurement.csv"
weight_measure_file <- read.csv2(url(github_url), sep = "\t")
# Replace 'YOUR_PAT' and 'RAW_CSV_URL' with your actual PAT and raw file URL
pat <- "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"
url <- "https://raw.githubusercontent.com/bioth/gut-microbiota-iron/main/adult_dss_weight_measurement.csv"
# Create a request with the PAT in the Authorization header
response <- GET(url, add_headers(Authorization = paste("Bearer", pat)))
# Replace 'YOUR_PAT' and 'RAW_CSV_URL' with your actual PAT and raw file URL
pat <- "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"
url <- "https://raw.githubusercontent.com/bioth/gut-microbiota-iron/main/adult_dss_weight_measurement.csv"
# Create a request with the PAT in the Authorization header
response <- GET(url, add_headers(Authorization = paste("Bearer", pat)))
# Check if the request was successful (status code 200)
if (http_status(response)$status == 200) {
# Read the CSV file from the response content
data <- read_csv(content(response, "text"))
# Now 'data' contains your CSV file data
} else {
cat("Error:", http_status(response)$reason, "\n")
}
# Create a request with the PAT in the Authorization header
response <- GET(url, add_headers(Authorization = paste("Bearer", pat)))
# Replace 'YOUR_PAT' and 'RAW_CSV_URL' with your actual PAT and raw file URL
pat <- "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"
url <- "https://raw.githubusercontent.com/bioth/gut-microbiota-iron/main/adult_dss_weight_measurement.csv?token="
# Create a request with the PAT in the Authorization header
response <- GET(url, add_headers(Authorization = paste("Bearer", pat)))
# Replace 'YOUR_PAT' and 'RAW_CSV_URL' with your actual PAT and raw file URL
pat <- "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"
url <- "https://raw.githubusercontent.com/bioth/gut-microbiota-iron/main/adult_dss_weight_measurement.csv?token=GHSAT0AAAAAACM4RJV2VQYLLKDVXNCBJQ3GZNQEKBQ"
# Create a request with the PAT in the Authorization header
response <- GET(url, add_headers(Authorization = paste("Bearer", pat)))
#downloading the csv file from github
github_token <- "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"
set_config(config(token = github_token))
github_url <- "https://github.com/bioth/gut-microbiota-iron/blob/main/adult_dss_weight_measurement.csv"
weight_measure_file <- read.csv2(url(github_url), sep = "\t")
# Replace 'YOUR_PAT' and 'RAW_CSV_URL' with your actual PAT and raw file URL
pat <- "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"
url <- "https://raw.githubusercontent.com/bioth/gut-microbiota-iron/main/adult_dss_weight_measurement.csv"
# Create a request with the PAT in the Authorization header
response <- GET(url, add_headers(Authorization = paste("Bearer", pat)))
# Create a request with the PAT in the Authorization header
response <- GET(url, config = add_headers(Authorization = paste("Bearer", pat)))
# Create a request with the PAT in the Authorization header
response <- GET(url, config = add_headers(Authorization = paste("token", pat)))
str(pat)
set_config(config(token = github_token))
# Replace 'YOUR_PAT' and 'RAW_CSV_URL' with your actual PAT and raw file URL
pat <- "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"
url <- "https://raw.githubusercontent.com/bioth/gut-microbiota-iron/main/adult_dss_weight_measurement.csv"
# Create a request with the PAT in the Authorization header
response <- GET(url, config = add_headers(Authorization = paste("token", pat)))
# Create a request with the PAT in the Authorization header
response <- GET(url, config = authenticate(token = pat))
# Replace 'YOUR_PAT' and 'RAW_CSV_URL' with your actual PAT and raw file URL
pat <- "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"
url <- "https://raw.githubusercontent.com/bioth/gut-microbiota-iron/main/adult_dss_weight_measurement.csv"
str(pat)
# Create a request with the PAT in the Authorization header
response <- GET(url, config = authenticate(token = pat))
# Replace 'YOUR_PAT' and 'RAW_CSV_URL' with your actual PAT and raw file URL
pat <- "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"
url <- "https://raw.githubusercontent.com/bioth/gut-microbiota-iron/main/adult_dss_weight_measurement.csv"
str(pat)
# Create a request with the PAT in the Authorization header
response <- GET(file_url, config = authenticate(token = pat))
# Create a request with the PAT in the Authorization header
response <- GET(url, config = authenticate(token = pat))
# Create a request with the PAT in the Authorization header
response <- GET(url, config = add_headers(Authorization = paste("Bearer", pat)))
# Create a request with the PAT in the Authorization header
response <- GET(file_url, config = authenticate(token = pat, type = "bearer"))
# Create a request with the PAT in the Authorization header
response <- GET(url, config = authenticate(token = pat, type = "bearer"))
paste(pat,url)
paste(url,pat,sep="")
# Replace 'YOUR_PAT' and 'RAW_CSV_URL' with your actual PAT and raw file URL
pat <- "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"
url <- "https://raw.githubusercontent.com/bioth/gut-microbiota-iron/main/adult_dss_weight_measurement.csv?="
paste(url,pat,sep="")
test <- paste(url,pat,sep="")
# Create a request with the PAT in the Authorization header
response <- GET(test)
#loading libraries
library("tidyverse")
library("ggplot2")
library("dplyr")
library("readr")
library("httr")
# Create a request with the PAT in the Authorization header
response <- GET(test)
