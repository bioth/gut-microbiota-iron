all(target_seq[i] != other_seqs[, i]) && target_seq[i] != "-"
})
print(is_unique)
return(NULL)
get_ranges <- function(pos) { # Get alignment positions of continuous unique regions
if (length(pos) == 0) return(NULL)
split_at <- c(0, which(diff(pos) != 1), length(pos))
ranges <- mapply(
function(start, end) c(pos[start + 1], pos[end]),
split_at[-length(split_at)],
split_at[-1]
)
print(ranges)
return(NULL)
do.call(rbind, ranges)
}
unique_positions <- which(is_unique)
print(unique_positions)
alignment_ranges <- get_ranges(unique_positions)
map_to_ungapped <- function(aln_pos) { # Map alignment positions to ungapped positions in the first sequence
gapless_pos <- cumsum(target_seq != "-")
return(gapless_pos[aln_pos])
}
ungapped_ranges <- apply(alignment_ranges, 1, function(rng) {
mapped <- map_to_ungapped(rng)
paste0(mapped[1], ",", mapped[2])
})
print(ungapped_ranges)
}
find_specific_windows("~/Downloads/clustalo-I20250513-192439-0258-24961506-p1m - Copie.fasta")
# Identify windows where the target is specific (as before)
find_specific_windows <- function(fasta_file, window_size = 20, step = 1, max_mismatch = 3) {
aln <- readDNAStringSet(fasta_file)
aln_mat <- as.matrix(aln)
target <- aln_mat[1, ]
n_seqs <- nrow(aln_mat)
aln_length <- ncol(aln_mat)
starts <- integer()
for (s in seq(1, aln_length - window_size + 1, by = step)) {
w <- s:(s + window_size - 1)
tw <- target[w]
if ("-" %in% tw) next
# check mismatches
for (i in 2:n_seqs) {
cw <- aln_mat[i, w]
if ("-" %in% cw) next
if (sum(tw != cw) <= max_mismatch) {
tw <- NULL
break
}
}
if (!is.null(tw)) starts <- c(starts, s)
}
aligned_seq <- paste0(as.character(readDNAStringSet(fasta_file)[1]), collapse = "")
list(starts = starts,
window_size = window_size,
aligned_seq = aligned_seq)
}
find_specific_windows(fasta_file =  "~/Downloads/clustalo-I20250513-192439-0258-24961506-p1m - Copie.fasta", window_size = 100)
library(Biostrings)
# Convert an aligned coordinate (with gaps) to the true ungapped sequence position
aligned_to_ungapped_pos <- function(aligned_seq, aln_pos) {
aligned_seq <- paste0(aligned_seq, collapse = "")
ungapped_pos <- 0L
for (i in seq_len(aln_pos)) {
if (substr(aligned_seq, i, i) != "-") ungapped_pos <- ungapped_pos + 1L
}
return(ungapped_pos)
}
# Identify windows where the target is specific (as before)
find_specific_windows <- function(fasta_file, window_size = 20, step = 1, max_mismatch = 3) {
aln <- readDNAStringSet(fasta_file)
aln_mat <- as.matrix(aln)
target <- aln_mat[1, ]
n_seqs <- nrow(aln_mat)
aln_length <- ncol(aln_mat)
starts <- integer()
for (s in seq(1, aln_length - window_size + 1, by = step)) {
w <- s:(s + window_size - 1)
tw <- target[w]
if ("-" %in% tw) next
# check mismatches
for (i in 2:n_seqs) {
cw <- aln_mat[i, w]
if ("-" %in% cw) next
if (sum(tw != cw) <= max_mismatch) {
tw <- NULL
break
}
}
if (!is.null(tw)) starts <- c(starts, s)
}
aligned_seq <- paste0(as.character(readDNAStringSet(fasta_file)[1]), collapse = "")
list(starts = starts,
window_size = window_size,
aligned_seq = aligned_seq)
}
# Now build excluded regions from the complement of those starts
exclude_non_specific_regions <- function(fasta_file,
window_size = 20,
step = 1,
max_mismatch = 3,
primer_len = 20) {
spec <- find_specific_windows(fasta_file, window_size, step, max_mismatch)
aln_seq <- spec$aligned_seq
aln_len <- nchar(aln_seq)
# all possible window starts
all_starts <- seq(1, aln_len - window_size + 1, by = step)
forbidden_starts <- setdiff(all_starts, spec$starts)
if (length(forbidden_starts) == 0) {
message("No forbidden regions: everything is specific.")
return(invisible(NULL))
}
# Group into contiguous runs
groups <- split(forbidden_starts, cumsum(c(1, diff(forbidden_starts) != step)))
excluded_blocks <- lapply(groups, function(g) {
aln_start <- min(g)                             # first aligned pos
aln_end   <- max(g) + window_size - 1L          # last aligned pos of that window
# expand on both ends so no primer of length primer_len can overlap
aln_start <- max(1, aln_start - (primer_len - 1L))
aln_end   <- min(aln_len, aln_end   + (primer_len - 1L))
# convert to ungapped coordinates
start_true <- aligned_to_ungapped_pos(aln_seq, aln_start)
end_true   <- aligned_to_ungapped_pos(aln_seq, aln_end)
length_true <- end_true - start_true + 1L
c(start_true, length_true)
})
# collapse for Primer3
reg_str <- paste(vapply(excluded_blocks,
function(x) paste0(x[1], ",", x[2]),
character(1)),
collapse = " ")
cat("SEQUENCE_PRIMER_EXCLUDED_REGION=", reg_str, "\n\n", sep = "")
# annotate with <...>
ungapped <- strsplit(gsub("-", "", aln_seq), "")[[1]]
mask <- rep(FALSE, length(ungapped))
for (blk in excluded_blocks) {
idx <- blk[1]:(blk[1] + blk[2] - 1L)
mask[idx] <- TRUE
}
annotated <- character(0)
i <- 1L
while (i <= length(ungapped)) {
if (mask[i]) {
annotated <- c(annotated, "<")
while (i <= length(ungapped) && mask[i]) {
annotated <- c(annotated, ungapped[i])
i <- i + 1L
}
annotated <- c(annotated, ">")
} else {
annotated <- c(annotated, ungapped[i])
i <- i + 1L
}
}
cat("Annotated sequence:\n")
cat(paste0(annotated, collapse = ""), "\n")
invisible(list(excluded = excluded_blocks,
regions_str = reg_str,
annotated = paste0(annotated, collapse = "")))
}
find_specific_windows(fasta_file =  "~/Downloads/clustalo-I20250513-192439-0258-24961506-p1m - Copie.fasta", window_size = 100)
find_specific_windows(fasta_file =  "~/Downloads/clustalo-I20250513-192439-0258-24961506-p1m - Copie.fasta", window_size = 20)
# loading libraries
{
library("tidyverse") # loading bunch of packages
library("ggplot2") # come on, everyone knows what it is used for
library("dplyr") # arranging and manipulating data easily
library("geepack") # library for loading GEE tests
library("lme4") # library for loading ANOVA
library("car") # for anova too
library("ggsignif") # adding significance bars to ggplots
library("readxl") # Read and write excel files
}
# Setting working directory
setwd("D:/CHUM_git/gut-microbiota-iron/")
# Loading functions for data manipulation
source("other scripts/dataManipFunctions.R")
# Setting working directory
setwd("~/Documents/CHUM_git/gut-microbiota-iron/")
# Loading functions for data manipulation
source("other scripts/dataManipFunctions.R")
setwd("experiments/finished exp/young-DSS-exp3")
# Mice dissection data
dissec_young <- read.csv("young48_dss_dissection.csv", sep = ";", header = TRUE)
dissec_young <- dissectionDataManipulation(dissec_young, groupInfoCols = 4, numerical = FALSE)
dissec_young$gg_group <- factor(dissec_young$gg_group, levels = c("50 water","500 water","50 dss","500 dss"))
dissec_young$colon_length_nrm <- dissec_young$colon_length/dissec_young$body_weight
#boxplot for body weight
young_dissec_bw <- dissecBoxplot(dissec_young,"body")
young_dissec_bw
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water")),
annotations = c("*"),
y_position = c(8),
tip_length = 0.03
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water")),
annotations = c("*"),
y_position = c(8),
tip_length = 0
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water")),
annotations = c("*"),
y_position = c(8),
tip_length = 0,
color = "black"
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water")),
annotations = c("*"),
y_position = c(8),
tip_length = 0,
color = "black",
width = 1
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water")),
annotations = c("*"),
y_position = c(8),
tip_length = 0,
color = "black",
size = 1
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water")),
annotations = c("*"),
y_position = c(8),
tip_length = 0,
color = "black",
size = 1,
textsize = 1
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water")),
annotations = c("*"),
y_position = c(8),
tip_length = 0,
color = "black",
size = 1,
textsize = 10
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water")),
annotations = c("*"),
y_position = c(8),
tip_length = 0,
color = "black",
size = 1,
textsize = 5
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water")),
annotations = c("*"),
y_position = c(8),
tip_length = 0,
color = "black",
size = 1,
textsize = 5,
margin_top = 12
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water")),
annotations = c("*"),
y_position = c(8),
tip_length = 0,
color = "black",
size = 1,
textsize = 5,
margin_top = 1
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water")),
annotations = c("*"),
y_position = c(8),
tip_length = 0,
color = "black",
size = 1,
textsize = 5,
margin_top = 1, # Moves the top according to this value
vjust = 1
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water")),
annotations = c("*"),
y_position = c(8),
tip_length = 0,
color = "black",
size = 1,
textsize = 5,
margin_top = 1, # Moves the top according to this value
vjust = 2
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water")),
annotations = c("*"),
y_position = c(8),
tip_length = 0,
color = "black",
size = 1,
textsize = 5,
margin_top = 1, # Moves the top according to this value
vjust = 0.5
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water")),
annotations = c("*"),
y_position = c(8),
tip_length = 2,
color = "black",
size = 1,
textsize = 5,
margin_top = 1, # Moves the top according to this value
vjust = 0.5
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water")),
annotations = c("*"),
y_position = c(8),
tip_length = 1,
color = "black",
size = 1,
textsize = 5,
margin_top = 1, # Moves the top according to this value
vjust = 0.5
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water")),
annotations = c("*"),
y_position = c(8),
tip_length = 0.05,
color = "black",
size = 1,
textsize = 5,
margin_top = 1, # Moves the top according to this value
vjust = 0.5
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water")),
annotations = c("*"),
y_position = c(8),
tip_length = 0.05,
color = "black",
size = 1,
textsize = 5,
margin_top = 1, # Moves the top according to this value
vjust = 0.5,
step_increase = 12
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water"),c("50 dss", "500 dss")),
annotations = c("*","NS"),
y_position = 8,
tip_length = 0.05,
color = "black",
size = 1,
textsize = 5,
margin_top = 1, # Moves the top according to this value
vjust = 0.5
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water"),c("50 dss", "500 dss")),
annotations = c("*","ns"),
y_position = 8,
tip_length = 0.05,
color = "black",
size = 1,
textsize = 5,
margin_top = 1, # Moves the top according to this value
vjust = 0.5
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water"),c("50 dss", "500 dss")),
annotations = c("*","ns"),
y_position = 8,
tip_length = 0.05,
color = "black",
size = 1,
textsize = 5,
margin_top = 1, # Moves the top according to this value
vjust = 0.5,
step_increase = 1
)
young_dissec_bw+
geom_signif(
comparisons = list(c("50 water", "500 water"),c("50 dss", "500 dss")),
annotations = c("*","ns"),
y_position = 8,
tip_length = 0.05,
color = "black",
size = 1,
textsize = 5,
margin_top = 1, # Moves the top according to this value
vjust = 0.5,
step_increase = 0.5
)
source("~/Documents/CHUM_git/gut-microbiota-iron/other scripts/dataManipFunctions.R")
source("~/Documents/CHUM_git/gut-microbiota-iron/other scripts/dataManipFunctions.R")
#boxplot for body weight
young_dissec_bw <- dissecBoxplot(dissec_young,"body", stats = TRUE, test_results = c("1","2","3","4"))
young_dissec_bw
source("~/Documents/CHUM_git/gut-microbiota-iron/other scripts/dataManipFunctions.R")
#boxplot for body weight
young_dissec_bw <- dissecBoxplot(dissec_young,"body", stats = TRUE, test_results = c("1","2","3","4"))
young_dissec_bw
source("~/Documents/CHUM_git/gut-microbiota-iron/other scripts/dataManipFunctions.R")
#boxplot for body weight
young_dissec_bw <- dissecBoxplot(dissec_young,"body", stats = TRUE, test_results = c("1","2","3","4"))
young_dissec_bw
source("~/Documents/CHUM_git/gut-microbiota-iron/other scripts/dataManipFunctions.R")
#boxplot for body weight
young_dissec_bw <- dissecBoxplot(dissec_young,"body", stats = TRUE, test_results = c("1","2","3","4"))
young_dissec_bw
source("~/Documents/CHUM_git/gut-microbiota-iron/other scripts/dataManipFunctions.R")
#boxplot for body weight
young_dissec_bw <- dissecBoxplot(dissec_young,"body", stats = TRUE, test_results = c("1","2","3","4"))
young_dissec_bw
source("~/Documents/CHUM_git/gut-microbiota-iron/other scripts/dataManipFunctions.R")
#boxplot for body weight
young_dissec_bw <- dissecBoxplot(dissec_young,"body", stats = TRUE, test_results = c("1","2","3","4"))
young_dissec_bw
source("~/Documents/CHUM_git/gut-microbiota-iron/other scripts/dataManipFunctions.R")
#boxplot for body weight
young_dissec_bw <- dissecBoxplot(dissec_young,"body", stats = TRUE, test_results = c("1","2","3","4"))
young_dissec_bw
source("~/Documents/CHUM_git/gut-microbiota-iron/other scripts/dataManipFunctions.R")
#boxplot for body weight
young_dissec_bw <- dissecBoxplot(dissec_young,"body", stats = TRUE, test_results = c("1","2","3","4"))
young_dissec_bw
source("~/Documents/CHUM_git/gut-microbiota-iron/other scripts/dataManipFunctions.R")
#boxplot for body weight
young_dissec_bw <- dissecBoxplot(dissec_young,"body", stats = TRUE, test_results = c("1","2","3","4"))
young_dissec_bw
#boxplot for std liver weight
young_dissec_lvr <- dissecBoxplot(dissec_young,"liver",stats = TRUE, test_results = c("1","2","3","4"))
young_dissec_lvr
source("~/Documents/CHUM_git/gut-microbiota-iron/other scripts/dataManipFunctions.R")
#boxplot for body weight
young_dissec_bw <- dissecBoxplot(dissec_young,"body", stats = TRUE, test_results = c("1","2","3","4"))
young_dissec_bw
#boxplot for std liver weight
young_dissec_lvr <- dissecBoxplot(dissec_young,"liver",stats = TRUE, test_results = c("1","2","3","4"))
young_dissec_lvr
source("~/Documents/CHUM_git/gut-microbiota-iron/other scripts/dataManipFunctions.R")
#boxplot for body weight
young_dissec_bw <- dissecBoxplot(dissec_young,"body", stats = TRUE, test_results = c("1","2","3","4"))
young_dissec_bw
source("~/Documents/CHUM_git/gut-microbiota-iron/other scripts/dataManipFunctions.R")
#boxplot for body weight
young_dissec_bw <- dissecBoxplot(dissec_young,"body", stats = TRUE, test_results = c("1","2","3","4"))
young_dissec_bw
source("~/Documents/CHUM_git/gut-microbiota-iron/other scripts/dataManipFunctions.R")
#boxplot for body weight
young_dissec_bw <- dissecBoxplot(dissec_young,"body", stats = TRUE, test_results = c("1","2","3","4"))
young_dissec_bw
source("~/Documents/CHUM_git/gut-microbiota-iron/other scripts/dataManipFunctions.R")
#boxplot for body weight
young_dissec_bw <- dissecBoxplot(dissec_young,"body", stats = TRUE, test_results = c("1","2","3","4"))
young_dissec_bw
#boxplot for std liver weight
young_dissec_lvr <- dissecBoxplot(dissec_young,"liver",stats = TRUE, test_results = c("1","2","3","4"), upper_margin = 1)
young_dissec_lvr
#boxplot for std liver weight
young_dissec_lvr <- dissecBoxplot(dissec_young,"liver",stats = TRUE, test_results = c("1","2","3","4"), upper_margin = 0.1)
young_dissec_lvr
#boxplot for std liver weight
young_dissec_lvr <- dissecBoxplot(dissec_young,"liver",stats = TRUE, test_results = c("1","2","3","4"), upper_margin = 0.02)
young_dissec_lvr
# boxplot for std spleen weight
young_dissec_spln <- dissecBoxplot(dissec_young,"spleen", stats = TRUE, test_results = c("1","2","3","4"))
young_dissec_spln
# boxplot for std spleen weight
young_dissec_spln <- dissecBoxplot(dissec_young,"spleen", stats = TRUE, test_results = c("1","2","3","4"), upper_margin = 0.0005)
young_dissec_spln
# boxplot for std spleen weight
young_dissec_spln <- dissecBoxplot(dissec_young,"spleen", stats = TRUE, test_results = c("1","2","3","4"), upper_margin = 0.001)
young_dissec_spln
# boxplot for std spleen weight
young_dissec_spln <- dissecBoxplot(dissec_young,"spleen", stats = TRUE, test_results = c("1","2","3","4"), upper_margin = 0.001)
young_dissec_spln
# boxplot for std spleen weight
young_dissec_spln <- dissecBoxplot(dissec_young,"spleen", stats = TRUE, test_results = c("1","2","3","4"), upper_margin = 0.01)
young_dissec_spln
# boxplot for std spleen weight
young_dissec_spln <- dissecBoxplot(dissec_young,"spleen", stats = TRUE, test_results = c("1","2","3","4"), upper_margin = 0.008)
young_dissec_spln
source("~/Documents/CHUM_git/gut-microbiota-iron/other scripts/dataManipFunctions.R")
# boxplot for std spleen weight
young_dissec_spln <- dissecBoxplot(dissec_young,"spleen", stats = TRUE, test_results = c("1","2","3","4"), upper_margin = 0.008)
young_dissec_spln
